[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nReactMeteorData = Package['react-meteor-data'].ReactMeteorData;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"tasks.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                               //\n// imports/api/tasks.js                                                                          //\n//                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                 //\nmodule.export({\n  Tasks: () => Tasks\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nconst Tasks = new Mongo.Collection('tasks');\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  Meteor.publish('tasks', function tasksPublication() {\n    return Tasks.find({\n      $or: [{\n        private: {\n          $ne: true\n        }\n      }, {\n        owner: this.userId\n      }]\n    });\n  });\n}\n\nMeteor.methods({\n  'tasks.setPrivate'(taskId, setToPrivate) {\n    check(taskId, String);\n    check(setToPrivate, Boolean);\n    const task = Tasks.findOne(taskId); // Make sure only the task owner can make a task private\n\n    if (task.owner !== this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.update(taskId, {\n      $set: {\n        private: setToPrivate\n      }\n    });\n  }\n\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"server\":{\"main.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                               //\n// server/main.js                                                                                //\n//                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                 //\nmodule.link(\"../imports/api/tasks.js\");\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/api/tasks.js","server/main.js"],"names":["module","export","Tasks","Mongo","link","v","Collection","Meteor","isServer","publish","tasksPublication","find","$or","private","$ne","owner","userId","methods","taskId","setToPrivate","check","String","Boolean","task","findOne","Error","update","$set"],"mappings":";;;;;;;;AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,OAAK,EAAC,MAAIA;AAAX,CAAd;AAAiC,IAAIC,KAAJ;AAAUH,MAAM,CAACI,IAAP,CAAY,cAAZ,EAA2B;AAACD,OAAK,CAACE,CAAD,EAAG;AAACF,SAAK,GAACE,CAAN;AAAQ;;AAAlB,CAA3B,EAA+C,CAA/C;AAGpC,MAAMH,KAAK,GAAG,IAAIC,KAAK,CAACG,UAAV,CAAqB,OAArB,CAAd;;AAEP,IAAIC,MAAM,CAACC,QAAX,EAAqB;AACnB;AACAD,QAAM,CAACE,OAAP,CAAe,OAAf,EAAwB,SAASC,gBAAT,GAA4B;AAClD,WAAOR,KAAK,CAACS,IAAN,CAAW;AACfC,SAAG,EAAE,CACH;AAAEC,eAAO,EAAE;AAAEC,aAAG,EAAE;AAAP;AAAX,OADG,EAEH;AAAEC,aAAK,EAAE,KAAKC;AAAd,OAFG;AADU,KAAX,CAAP;AAMD,GAPD;AAQD;;AAEDT,MAAM,CAACU,OAAP,CAAe;AACZ,qBAAmBC,MAAnB,EAA2BC,YAA3B,EAAyC;AACvCC,SAAK,CAACF,MAAD,EAASG,MAAT,CAAL;AACAD,SAAK,CAACD,YAAD,EAAeG,OAAf,CAAL;AAEA,UAAMC,IAAI,GAAGrB,KAAK,CAACsB,OAAN,CAAcN,MAAd,CAAb,CAJuC,CAMvC;;AACA,QAAIK,IAAI,CAACR,KAAL,KAAe,KAAKC,MAAxB,EAAgC;AAC9B,YAAM,IAAIT,MAAM,CAACkB,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAEDvB,SAAK,CAACwB,MAAN,CAAaR,MAAb,EAAqB;AAAES,UAAI,EAAE;AAAEd,eAAO,EAAEM;AAAX;AAAR,KAArB;AACD;;AAbW,CAAf,E;;;;;;;;;;;ACjBAnB,MAAM,CAACI,IAAP,CAAY,yBAAZ,E","file":"/app.js","sourcesContent":["\nimport { Mongo } from 'meteor/mongo';\n \nexport const Tasks = new Mongo.Collection('tasks');\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  Meteor.publish('tasks', function tasksPublication() {\n    return Tasks.find({\n       $or: [\n         { private: { $ne: true } },\n         { owner: this.userId },\n       ],\n     });\n  });\n}\n\nMeteor.methods({\n   'tasks.setPrivate'(taskId, setToPrivate) {\n     check(taskId, String);\n     check(setToPrivate, Boolean);\n\n     const task = Tasks.findOne(taskId);\n\n     // Make sure only the task owner can make a task private\n     if (task.owner !== this.userId) {\n       throw new Meteor.Error('not-authorized');\n     }\n\n     Tasks.update(taskId, { $set: { private: setToPrivate } });\n   },\n });","import '../imports/api/tasks.js';  \n"]}}]